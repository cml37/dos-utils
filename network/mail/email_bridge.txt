====================================================================
Preconditions
====================================================================
You have set up a Raspberry Pi and enabled SSH.
  See my instructions here for an example: https://github.com/cml37/dos-utils/blob/master/config/my_raspberrypi_setup_instructions.txt

====================================================================
Configure Incoming email
====================================================================
NOTE: Configuration is performed with the default Raspberry Pi user named "pi".
      You are free to add other users and use them instead as you see fit.
      Also, this procedure assumes that 2 factor authentication is not set up 
      on your Gmail account, that you have enabled support for less secure applications 
      in Gmail, and that you have enabled imap access in Gmail

Debugging (if needed): 
  journalctl | grep fetchmail
  cat /var/log/mail.log

Install packages:
  sudo apt-get update
  sudo apt-get install dovecot-common dovecot-imapd fetchmail

Build and install maildrop from source:
  wget https://sourceforge.net/projects/courier/files/maildrop/3.0.1/maildrop-3.0.1.tar.bz2/download
  mv download maildrop-3.0.1.tar.bz2
  bunzip2 maildrop-3.0.1.tar.bz2
  tar xf maildrop-3.0.1.tar
  sudo apt-get install libpcre3-dev libidn11-dev libcourier-unicode-dev 
  cd maildrop-3.0.1
  ./configure
  sudo make install

Configure maildir usage and logging for:
  sudo nano /etc/maildroprc and add the below line (no spaces at beginning of the line):
  DEFAULT="$HOME/Maildir" 
  
At this point, you could also add additional filtering rules in your maildroprc file to handle spam, routing, etc. 
  You could also automate the creation of users, etc.  Here's just one example: http://gogs.info/wiki/debian/maildrop.html
  However, we won't be covering those concepts in this walkthrough

Create a maildir directory for the pi user:
  maildirmake ~/Maildir

Configure dovecot:
  sudo nano /etc/dovecot/dovecot.conf
  add the below at the bottom of the file:

    protocols = imap
    mail_location = maildir:~/Maildir
    mail_privileged_group = mail
    auth_mechanisms = plain
    passdb {
      driver = pam
      args = *
    }
    disable_plaintext_auth=no
    ssl=yes

    namespace inbox {
      inbox = yes
      separator = /

      mailbox "Drafts" {
        auto = subscribe
        special_use = \Drafts
      }
      mailbox "Sent" {
        auto = subscribe
        special_use = \Sent
      }
      mailbox "Trash" {
        auto = subscribe
        special_use = \Trash
      }
      mailbox "Junk" {
        auto = subscribe
        special_use = \Junk
      }
      mailbox "Archive" {
        auto = subscribe
        special_use = \Archive
      }
    }

Restart dovecot:
  sudo /etc/init.d/dovecot restart

Check status of dovecot to make sure it is running:
  sudo /etc/init.d/dovecot status

Configure fetchmail:
  sudo nano /etc/fetchmailrc
  Add the below, adjusting the username and password to be your username and password:

    set daemon 60
    set syslog
    set postmaster "Postmaster"

    poll imap.gmail.com protocol IMAP 
       user "xxxxxxx@gmail.com" is pi here
       password 'mysecretpassword'
       folder 'inbox'
       keep
       ssl
       mda "/usr/local/bin/maildrop -d %T"

Set permissions on fetchmail configs:
  sudo chown root: /etc/fetchmailrc
  sudo chmod 600 /etc/fetchmailrc

Set fetchmail to run on startup:
  sudo nano /etc/default/fetchmail
  set START_DAEMON=yes

Change fetchmail user to root (otherwise the MDA will fail, and setuid doesn't work well on a Raspberry pi)
  sudo nano /etc/init.d/fetchmail
    change 
      USER=fetchmail 
    to 
      USER=root

Restart fetchmail:
  sudo systemctl daemon-reload
  sudo service fetchmail restart
    
From there you can configure your mail client!
  user name: pi
  server name: <hostname of your pi>
  password: <your raspberry pi password for the pi user>
  port: 143
  Connection security: None
 
====================================================================
Configure Outgoing email
====================================================================
NOTE: This procedure assumes that 2 factor authentication is not set up on your Gmail account

Install modules
  sudo apt-get install postfix libsasl2-modules
  
  When prompted
    Choose Internet Site and press enter
    Leave the System mail name as default and press enter

Create a password file with your username and password
  sudo nano -B /etc/postfix/sasl/sasl_passwd
    Add this line, substituting in your username and password (and no whitespace at the beginning of the line):
   [smtp.gmail.com]:587 username@gmail.com:password

Now, let's protect that password file and also create a database for postfix that has your password in it
  sudo chmod u=rw,go= /etc/postfix/sasl/sasl_passwd
  sudo postmap /etc/postfix/sasl/sasl_passwd
  sudo chmod u=rw,go= /etc/postfix/sasl/sasl_passwd.db

Now let's create a postfix config file
  sudo cp /etc/postfix/main.cf !#$.dist
  sudo nano /etc/postfix/main.cf
    search for 
      relayhost = 
    change to 
      relayhost = [smtp.gmail.com]:587
    search for 
      mynetworks = 
    add your network and a netmask to the end of the list of networks (this allows for relaying of messages)
      mynetworks = <existing text> 192.168.1.0/24
    when complete, my networks line looked like this
      mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128 192.168.1.0/24
    Also, add all of the below to the bottom of the file (no whitespace at the beginning of the lines)
      # Enable authentication using SASL.
      smtp_sasl_auth_enable = yes
      # Use transport layer security (TLS) encryption.
      smtp_tls_security_level = encrypt
      # Do not allow anonymous authentication.
      smtp_sasl_security_options = noanonymous
      # Specify where to find the login information.
      smtp_sasl_password_maps = hash:/etc/postfix/sasl/sasl_passwd
      # Where to find the certificate authority (CA) certificates.
      smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt

Run this command to create/fix aliases
  sudo newaliases

Restart postfix
  sudo systemctl restart postfix
  
From there you can configure your mail client!
  user name: pi
  server name: <hostname of your pi>
  password: <your raspberry pi password for the pi user>
  port: 25
  Connection security: None